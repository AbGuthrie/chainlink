name: Performance and Chaos Tests

on:
  push:
    tags:
      - v*
    branches:
      - develop
      - main
  pull_request:

jobs:
  build-chainlink:
    name: Build chainlink image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      # Login to dockerhub so that we don't get rate limited
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_READONLY_USERNAME }}
          password: ${{ secrets.DOCKER_READONLY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: core/chainlink.Dockerfile
          build-args: COMMIT_SHA=${{ github.sha }},ENVIRONMENT=release
          tags: smartcontract/chainlink:latest
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          outputs: type=docker,dest=/tmp/chainlink.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: chainlink
          path: /tmp/chainlink.tar

  smoke:
    needs: build-chainlink
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: /tmp/KUBECONFIG
      CGO_ENABLED: 0
      APPS_CHAINLINK_IMAGE: smartcontract/chainlink
      APPS_CHAINLINK_VERSION: latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx
      - name: Download artifact from build-chainlink
        uses: actions/download-artifact@v2
        with:
          name: chainlink
          path: /tmp
      - name: Load Chainlink Docker image
        run: |
          docker load --input /tmp/chainlink.tar
          docker image ls -a
      # Login to dockerhub so that we don't get rate limited
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_READONLY_USERNAME }}
          password: ${{ secrets.DOCKER_READONLY_PASSWORD }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 3600
      - name: Prepare KUBECONFIG
        run: echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG
      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - name: Install Ginkgo CLI
        run: go install github.com/onsi/ginkgo/ginkgo
      - name: Download Go Vendor Packages
        run: go mod download
      - name: Run Tests
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          ./tools/ci/smoke_test_chainlink.sh 0
      - name: Publish Test Results
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: '**/logs/tests-*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Artifacts
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: test-logs
          path: .integration/suite/logs

  performance:
    needs: build-chainlink
    # Only run performance tests on significant PRs
    if: startsWith(github.base_ref, 'v') || contains(github.base_ref, 'main') || contains(github.base_ref, 'develop')
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: /tmp/KUBECONFIG
      CGO_ENABLED: 0
      APPS_CHAINLINK_IMAGE: smartcontract/chainlink
      APPS_CHAINLINK_VERSION: latest
      NETWORK: ethereum_geth_performance
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx
      - name: Download artifact from build-chainlink
        uses: actions/download-artifact@v2
        with:
          name: chainlink
          path: /tmp
      - name: Load Chainlink Docker image
        run: |
          docker load --input /tmp/chainlink.tar
          docker image ls -a
      # Login to dockerhub so that we don't get rate limited
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_READONLY_USERNAME }}
          password: ${{ secrets.DOCKER_READONLY_PASSWORD }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 3600
      - name: Prepare KUBECONFIG
        run: echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG
      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - name: Install Ginkgo CLI
        run: go install github.com/onsi/ginkgo/ginkgo
      - name: Download Go Vendor Packages
        run: go mod download
      - name: Run Tests
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          ./tools/ci/smoke_test_chainlink.sh 1
      - name: Publish Test Results
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: '**/logs/tests-*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Artifacts
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: test-logs
          path: .integration/suite/logs
