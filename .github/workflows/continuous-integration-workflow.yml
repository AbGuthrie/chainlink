name: CI

on: [push]

jobs:
  core:
    strategy:
      fail-fast: false
      matrix:
        cmd: ['go_core_tests']
    name: Core Tests
    runs-on: ubuntu-latest
    container:
      image: smartcontract/builder:1.0.40
      credentials:
        username: ${{ secrets.DOCKER_READONLY_USERNAME }}
        password: ${{ secrets.DOCKER_READONLY_PASSWORD }}
    env:
      DATABASE_URL: postgres://chainlink@postgres:5432/chainlink_test?sslmode=disable
      LOG_LEVEL: debug
    services:
      postgres:
        image: postgres
        credentials:
          username: ${{ secrets.DOCKER_READONLY_USERNAME }}
          password: ${{ secrets.DOCKER_READONLY_PASSWORD }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Set up Postgres user
        uses: docker://postgres
        with:
          args: psql -v ON_ERROR_STOP=1 --username postgres -h postgres -c "CREATE USER chainlink NOSUPERUSER CREATEDB;"
      - name: Install Postgres for CLI tools
        run: wget --quiet -O - https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" | tee  /etc/apt/sources.list.d/pgdg.list && apt update && apt install -y postgresql-client-13
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"      
      - name: Cache Yarn dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ env.CACHE_VERSION }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-${{ env.CACHE_VERSION }}
      - name: Install Yarn dependencies
        run: make yarndep
      - name: Cache Go vendor packages
        uses: actions/cache@v2
        with:
          path: /go/pkg/mod
          key: go-mod-${{ env.CACHE_VERSION }}-${{ hashFiles('go.sum') }}
          restore-keys: |
            go-mod-${{ env.CACHE_VERSION }}
      - name: Download Go vendor packages
        run: go mod download
      - name: Compile all contracts
        run: ./contracts/scripts/native_solc_compile_all
      - name: Verify local solc binaries
        run: ./tools/ci/check_solc_hashes
      - name: Setup DB
        run: go run ./core local db preparetest
      - name: Run tests
        run: ./tools/bin/${{ matrix.cmd }}
      - name: Store logs artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ matrix.cmd }}_logs
          path: ./output.txt
      - name: Print postgres logs
        if: always()
        uses: docker://docker:latest
        with:
          args: logs ${{ job.services.postgres.id }}

  prepublish_npm:
    name: Prepublish NPM
    runs-on: ubuntu-latest
    container:
      image: smartcontract/builder:1.0.40
      credentials:
        username: ${{ secrets.DOCKER_READONLY_USERNAME }}
        password: ${{ secrets.DOCKER_READONLY_PASSWORD }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Yarn cache
        uses: actions/cache@v2
        env:
          cache-name: yarn-cache
        with:
          path: |
            ~/.npm
            ~/.cache
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: yarn install --frozen-lockfile
      - run: ./tools/bin/restore-solc-cache
      - name: Run prepublish NPM test
        run: ./tools/ci/prepublish_npm_test


  smoke:
    runs-on: [self-hosted, sdlc-ghr-prod]
    env:
      KUBECONFIG: /tmp/KUBECONFIG
      CGO_ENABLED: 0
    steps:
      - name: Wait For Chainlink Image
        uses: lewagon/wait-on-check-action@v1.0.0
        with:
          ref: ${{ github.ref }}
          check-name: 'build-publish-chainlink'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      - name: Set Test Image and Version
        run: export 
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 3600
      - name: Prepare KUBECONFIG
        run: echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG
      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - name: Install Ginkgo CLI
        run: go install github.com/onsi/ginkgo/ginkgo
      - name: Download Go Vendor Packages
        run: go mod download
      - name: Run Tests
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          ./tools/ci/smoke_test_chainlink.sh
      - name: Publish Test Results
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: '**/logs/tests-*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Artifacts
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: test-logs
          path: ./logs
